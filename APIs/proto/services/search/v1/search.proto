syntax = "proto3";
package services.search.v1;
option go_package = "github.com/mar-coding/SearchEngineWrapper/APIs/proto-gen/services/search/v1;search";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/descriptor.proto";
import "googleapis/google/api/annotations.proto";
import "components/list/v1/list.proto";
import "validate/validate.proto";


// Service Information
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "search Service";
    version: "1.0";
    contact: {
      name: "MohammadAmin Rahimi";
      url: "127.0.0.1";
      email: "marcoding78@gmail.com";
    };
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token with prefixed Bearer"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }

  schemes: HTTPS;
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

// =============== service permissions ===============

extend google.protobuf.MethodOptions {
  Permission permission = 1000001;
}

message Permission {
  repeated Permissions permissions = 1;
  bool optional = 2;
  bool validate_permissions = 3;
  bool captcha = 4;
}

enum Permissions {
  NONE = 0;
  LIST_ITEM_POST = 1;
}

service SearchService {
  // ListItemsSearch
  //
  // | Field ID    | Name      | Type                                                       | Required                  |
  // | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
  // | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc ListItemsSearch(ListItemsSearchRequest) returns(ListItemsSearchResponse) {
    option(google.api.http) = {
      get: "/search"
    };
    option(search.v1.permission) = {
      permissions: NONE,
      validate_permissions: false,
      optional: false,
      captcha: false
    };
    option(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get list of items for searching query",
    };
  }
}

message ListItemsSearchResponse {
  repeated Item items = 1;
  int32 page_size = 2;
  int32 page_no = 3;
  int32 total_items_count = 4;
}

message Item {
  string title = 2;
  string description = 3;
  reserved 1,4,5,6,7,8,9;
  string url = 10;
}

message ListItemsSearchRequest {
  // required
  string q = 1 [(validate.rules).string.not_in = ""];
  int32 page_size = 2;
  int32 page_no = 3;
}
